CREATE TABLE DEPARTS
(
    DID CHAR(4) NOT NULL PRIMARY KEY, --학과 아이디
    DNAME VARCHAR2(50) NOT NULL, --학과 이름 한글 3바이트임 
    DQTY NUMBER(4) NOT NULL -- 학과 정원수
);

INSERT INTO DEPARTS VALUES('D001','철학과',20);
INSERT INTO DEPARTS VALUES('D002','수학과',30);
INSERT INTO DEPARTS VALUES('D003','경제학과',10);
INSERT INTO DEPARTS VALUES('D004','전산학과',20);

create table students2
(
    SID CHAR(4) NOT NULL PRIMARY KEY, --학생 아이디
    SNAME VARCHAR2(20) NOT NULL, -- 이름
    DID CHAR(4) NOT NULL, --학과 아이디 
    DAGE NUMBER(3) NOT NULL, -- 나이
    DGEN CHAR(1) NOT NULL --성별
);
--철학과
INSERT INTO STUDENTS2 VALUES('S001','장원석','D001',23,'M');
INSERT INTO STUDENTS2 VALUES('S002','박재영','D001',25,'M');
INSERT INTO STUDENTS2 VALUES('S003','최상훈','D001',27, 'M');
INSERT INTO STUDENTS2 VALUES('S004','김용수','D001',31, 'M');
--수학과
INSERT INTO STUDENTS2 VALUES('S005','최두원','D002',28, 'M');
INSERT INTO STUDENTS2 VALUES('S006','안상균','D002',21, 'M');
INSERT INTO STUDENTS2 VALUES('S007','김주희','D002',22, 'F');
INSERT INTO STUDENTS2 VALUES('S008','강석준','D002',23, 'M');
INSERT INTO STUDENTS2 VALUES('S009','이재혁','D002',26, 'M');
--경제학과
INSERT INTO STUDENTS2 VALUES('S010','박가나','D003',28, 'F');
INSERT INTO STUDENTS2 VALUES('S011','박소연','D003',23, 'F');
INSERT INTO STUDENTS2 VALUES('S012','이영효','D003',26, 'M');

 --전산학과 
 INSERT INTO STUDENTS2 VALUES('S013','이민희','D004',20,'F');

COMMIT;

--현재 재학중인 학생리스트
--이름 학과 나이 성별

SELECT T1.SNAME, T2.DNAME, T1.SAGE
    , DECODE(T1.SGEN,'M','남','여') AS SGEN
FROM STUDENTS2 T1, DEPARTS T2
WHERE T1.DID = T2.DID;

--철학과 소속 학생들 중에 나이가 가장 많은 학생 이름과 성별
--방법 1.태화
SELECT ROWNUM, X.*
FROM 
(
SELECT T1.SNAME, MAX(T1.SAGE)
FROM STUDENTS2 T1, DEPARTS T2
WHERE T1.DID = T2.DID 
GROUP BY T1.SNAME
ORDER BY SUM(T1.SAGE) DESC
) X 
WHERE ROWNUM = 1;
--방법 2.선생님
SELECT SNAME, DECODE(SGEN, 'M','남','여')AS DGEN FROM STUDENTS2
WHERE DID = 'D001'
AND SAGE = (SELECT MAX(SAGE) FROM STUDENTS2 WHERE DID= 'D001');

--현재 학과에 소속학생이 없는 과
--1.태화 JOIN은 둘다 같은걸 출력하는데 DEPARTS를 기준으로 STUDENT(+)를 다 출력하는 것
SELECT *
FROM DEPARTS D1, STUDENTS2 S1
WHERE D1.DID=S1.DID(+) 
AND S1.SID IS NULL; --SID가 NULL인 WHERE이 있는지 확인 
--2.EXIT방법(데이터의 존재여부)
SELECT * FROM DEPARTS T1
WHERE NOT EXISTS   --EXISTS 존재하는지 NOT EXISTS 는 존재하지 않는지 (NOT EXISTS을 사용하는 경우는 JOIN의 경우는 1:N 인데 이건 N:M방식 )
(
SELECT 1 --그냥 1이라는 컬럼명을 붙임
FROM STUDENTS2 T2 
WHERE T1.DID = T2.DID
);


CREATE TABLE PROFS
(
    PID CHAR(4) NOT NULL PRIMARY KEY,
    PNAME VARCHAR2(20) NOT NULL,
    DID CHAR(4) NOT NULL,
    PAGE NUMBER(3) NOT NULL,
    INYEAR VARCHAR2(4) NOT NULL
);

INSERT INTO PROFS VALUES('P001','김구라','D001',49,2017);
INSERT INTO PROFS VALUES('P002','김철학','D001',58,2010);
INSERT INTO PROFS VALUES('P003','박원주','D002',45,2018);
INSERT INTO PROFS VALUES('P004','이도형','D002',56,2011);
INSERT INTO PROFS VALUES('P005','최주식','D003',51,2008);
INSERT INTO PROFS VALUES('P006','김구라','D003',52,2013);
INSERT INTO PROFS VALUES('P007','오라클','D004',38,2019);
INSERT INTO PROFS VALUES('P008','강자바','D004',59,2009);

COMMIT;

--교수 리스트를 교수명 학과 나이 입사년도를 보여주는데
--입사년도 순으로 정렬하여 순서를 보여
--RANK() OVER (ORDER BY )
SELECT PID,PNAME,DID,PAGE,INYEAR ,RANK() OVER (ORDER BY INYEAR ASC ) AS RANK --무조건 순위를 나눔
FROM PROFS;
--DENSE_RANK() OVER (ORDER BY )
SELECT PID,PNAME,DID,PAGE,INYEAR ,DENSE_RANK() OVER (ORDER BY INYEAR ASC ) AS RANK --2등이 2개 있으면 3등을 다음에 부과
FROM PROFS;
--ROW_NUMBER() OVER (ORDER BY )
SELECT PID,PNAME,DID,PAGE,INYEAR ,ROW_NUMBER() OVER (ORDER BY INYEAR,PAGE ASC ) AS RANK --중복 순위는 없다.INYEAR비교하고 나이 비교하고
FROM PROFS;

--그룹별 순위 부여
SELECT PID,PNAME,DID,PAGE,INYEAR ,RANK() OVER (PARTITION BY DID ORDER BY INYEAR ASC ) AS RANK
FROM PROFS;

SELECT T1.PNAME, T2.DNAME, T1.PAGE, T1.INYEAR
    , RANK() OVER (ORDER BY T1.INYEAR) AS RNK
FROM PROFS T1,DEPARTS T2
WHERE T1.DID = T2.DID
ORDER BY T1.INYEAR ASC;
--Q.학과별 교수 숫자
--방법1. COUNT(*) -- COUNT는 NULL을 포함하지 않는다. 
        --SELECT COUNT(NVL(MCON, ' ' )) FROM ;
DESC PROFS;

SELECT T2.DID,T2.DNAME, COUNT(*) AS COUNT --1:1의 관계여야 한다...GROUP BY 이렇게 하려면
FROM PROFS T1,DEPARTS T2
WHERE T1.DID = T2.DID
GROUP BY T2.DID,T2.DNAME;


--Q.학과별 교수 한명당 학생 비율
--학과별 교수 숫자, 학생 숫자를 먼저 비교

1.학과와 학생은 '일'대'다' 인데 조인을 하면 '다' 이된다. 그다음에 그 결과와 교수를 조인걸면 '다':'다' 가 되며 조진다.

SELECT * FROM DEPARTS D1, STUDENTS2 S1, PROFS P1
WHERE D1.DID = S1.DID AND S1.DID=P1.DID;

--A.1.학과별 학생수 여기서 이상한게... 전산학과에 학생이 없는데 1이 나오네?? 그럼 그걸 수정해야함
SELECT D1.DID, D1.DNAME, COUNT(*)
FROM DEPARTS D1, STUDENTS2 S1
WHERE D1.DID = S1.DID(+)
GROUP BY D1.DID, D1.DNAME
;
--이렇게 해야하네 
SELECT D1.DID, D1.DNAME, COUNT(S1.SID) AS CNT_STUDENT
FROM DEPARTS D1, STUDENTS2 S1
WHERE D1.DID = S1.DID(+)
GROUP BY D1.DID, D1.DNAME
;

--2. 학과별 교수 수
SELECT D1.DID, D1.DNAME, COUNT(P1.PID) AS CNT_PRO
FROM DEPARTS D1, PROFS P1
WHERE D1.DID = P1.DID(+)
GROUP BY D1.DID, D1.DNAME
;

--와...시발 진짜 미쳤다......A와 B를 크로스 조인한거래 
SELECT A.DID, A.DNAME, (A.CNT_STUDENT/B.CNT_PRO) AS "QTY%"
FROM 
(
SELECT D1.DID, D1.DNAME, COUNT(S1.SID) AS CNT_STUDENT
FROM DEPARTS D1, STUDENTS2 S1
WHERE D1.DID = S1.DID(+)
GROUP BY D1.DID, D1.DNAME
)A
,
(
SELECT D1.DID, D1.DNAME, COUNT(P1.PID) AS CNT_PRO
FROM DEPARTS D1, PROFS P1
WHERE D1.DID = P1.DID(+)
GROUP BY D1.DID, D1.DNAME
)B
WHERE A.DID = B.DID;

-----과목테이블 추가
CREATE TABLE SUBJECTS2
(
    SUID CHAR(6) NOT NULL PRIMARY KEY,
    SUNAME VARCHAR2(30) NOT NULL,
    DID CHAR(4) NOT NULL,
    PID CHAR(4) NULL,
    GRADE NUMBER(4) NULL
);

INSERT INTO SUBJECTS2 VALUES('SU01','철학1','D001','P001',3);
INSERT INTO SUBJECTS2 VALUES('SU02','철학2','D001','P002',2);
INSERT INTO SUBJECTS2 VALUES('SU03','철학3','D001','P001',2);

INSERT INTO SUBJECTS2 VALUES('SU04','수학1','D002','P003',1);
INSERT INTO SUBJECTS2 VALUES('SU05','수학2','D002','P004',3);
INSERT INTO SUBJECTS2 VALUES('SU06','수학3','D002','P004',3);
INSERT INTO SUBJECTS2 VALUES('SU07','수학4','D002','P004',2);

INSERT INTO SUBJECTS2 VALUES('SU08','경제1','D003','P005',3);
INSERT INTO SUBJECTS2 VALUES('SU09','경제2','D003','P005',3);

INSERT INTO SUBJECTS2 VALUES('SU10','전산1','D004','P007',3);
INSERT INTO SUBJECTS2 VALUES('SU11','전산1','D004','P008',3);
INSERT INTO SUBJECTS2 VALUES('SU12','전산1','D004','P007',2);


COMMIT;

--교수별     학과 , 교수명, 시수

--1.태화
SELECT A.DID,B.DNAME,A.PNAME,A.GRADE
FROM 
(
SELECT  P1.DID, P1.PNAME, SUM(GRADE) AS GRADE
FROM PROFS P1, SUBJECTS2 S1
WHERE P1.PID = S1.PID
GROUP BY P1.DID,P1.PNAME
) A
,
(
SELECT P1.DID, P1.PNAME, D1.DNAME
FROM DEPARTS D1, PROFS P1
WHERE D1.DID = P1.DID
)B
WHERE A.DID= B.DID
;

--교수와 과목 테이블은 1:N관계에서 결과가 N이 나오고 부서의 테이블은 1:N관계는 가능하다 
SELECT T1.PID, T1.PNAME, T3.DNAME, T2.GRADE
FROM PROFS T1, SUBJECTS2 T2, DEPARTS T3
WHERE T1.PID = T2.PID
AND T1.DID = T3.DID
ORDER BY T1.PID ASC
GROUP BY T1.PID,T1.PNAME,T3.DNAME, T2.GRADE --이건 안된다. 보면은 DNAME에서 김구라 김철학에서 다르잖아 안돼 
;

SELECT T1.PID, T1.PNAME, SUM(T2.GRADE) AS GRD
FROM PROFS T1, SUBJECTS2 T2, DEPARTS T3
WHERE T1.PID = T2.PID
AND T1.DID = T3.DID
GROUP BY T1.PID,T1.PNAME;

------이거랑 이거 밑에꺼랑 같이 보자 
SELECT T1.PID, T1.PNAME, T2.GRADE, T3.DNAME
FROM PROFS T1, SUBJECTS2 T2, DEPARTS T3
WHERE T1.PID = T2.PID
AND T1.DID = T3.DID
;
        --주의할것 SUM도 NULL값을 뺸다. COUNT도 NULL값을 뺴고 합계,평균주의하기 !!! 둘다 NULL을 뺸다 그래서 SUM()과 AVG()를 같이하면 알수 있다. 
        --
SELECT T1.PID, T1.PNAME, NVL(SUM(T2.GRADE),0) AS GRD, MAX(T3.DNAME)
FROM PROFS T1, SUBJECTS2 T2, DEPARTS T3
WHERE T1.PID = T2.PID(+)
AND T1.DID = T3.DID
GROUP BY T1.PID,T1.PNAME;
-------------------------------------



--5교시------------------------------------------------
create table tbl 
(
 idx number(3),
 wtime varchar2(10)
);

insert into tbl values(1,'0800');
insert into tbl values(2,'0900');
insert into tbl values(3,'1000');
insert into tbl values(4,'1100');
insert into tbl values(5,'1200');
insert into tbl values(6,'1300');
insert into tbl values(7,'1400');
insert into tbl values(8,'1500');
insert into tbl values(9,'1600');
insert into tbl values(10,'1700');

select a2.WTIME, A1.WTIME from tbl a1, tbl a2
where a1.idx = a2.idx+1;
--방법1.
SELECT t1.idx-1 as idx , T2.WTIME ||'~'|| T1.WTIME as Time
FROM TBL T1, TBL T2
WHERE T1.IDX = T2.IDX+1;
--방법2.
SELECT T1.IDX ,TO_CHAR(TO_NUMBER(T1.WTIME),'0000')|| '~' || TO_CHAR(TO_NUMBER(T2.WTIME+100),'0000') AS 잉
FROM TBL T1,TBL T2
WHERE T1.IDX = T2.IDX
;
--방법3.
SELECT T1.IDX ,TO_CHAR(T1.WTIME ||  '~'  ||(T2.WTIME+100))
FROM TBL T1, TBL T2
WHERE T1.IDX = T2.IDX
;

--level 도 이해좀하자 
SELECT LEVEL
FROM dual
CONNECT BY LEVEL <= 30;

select to_char(to_date('2020-06-01')+(level-1),'yyyy-mm-dd') as b_date
from dual
connect by level<= 30
;
--아...할수있을꺼같은데.. ㅅㅂ 
select to_char(to_date(t1.wtime)+(level-1),'yyyy-mm-dd') as b_date
from dual a, tbl t1
connect by level<= 10
;

CREATE TABLE EXAMS
(
    PID CHAR(4) NOT NULL
    ,SUID CHAR(4) NOT NULL
    ,SEQ NUMBER(6) NOT NULL
    ,EYEAR VARCHAR2(4) NOT NULL
    ,SEME CHAR(1) NOT NULL
);
--철학과 철학1
INSERT INTO EXAMS VALUES('P001','SU01',1,'2020','1' );
--철학과 철학2
INSERT INTO EXAMS VALUES('P001','SU02',2,'2020','1' );
--철학과 철학3
INSERT INTO EXAMS VALUES('P002','SU03',3,'2020','1' );

--수학과 수학1
INSERT INTO EXAMS VALUES('P003','SU04',4,'2020','1' );
--수학과 수학2
INSERT INTO EXAMS VALUES('P003','SU05',5,'2020','1' );
--수학과 수학3
INSERT INTO EXAMS VALUES('P004','SU06',6,'2020','1' );
--수학과 수학4
INSERT INTO EXAMS VALUES('P004','SU07',7,'2020','1' );

--경제학과 경제1
INSERT INTO EXAMS VALUES('P005','SU08',8,'2020','1' );
--경제학과 경제2
INSERT INTO EXAMS VALUES('P006','SU09',9,'2020','1' );

COMMIT;

--교수들 중 시험문제를 출제하지 않는 교수 명단 -- 교수가 1, 시험문제가 다 
SELECT *
FROM  PROFS P1, EXAMS E1
WHERE  P1.PID = E1.PID(+)
AND E1.PID IS NULL;


---시험결과 테이블 생성
CREATE TABLE RESULT
(
     PID CHAR(4) NOT NULL
    ,SUID CHAR(4) NOT NULL
    ,SEQ NUMBER(6) NOT NULL
    ,SID CHAR(4) NOT NULL
    ,RSEQ NUMBER(6) NOT NULL
    ,SCORE NUMBER(4) NOT NULL
    ,RDATE DATE NOT NULL
);

SELECT * FROM STUDENTS2;
SELECT * FROM EXAMS;

   --철학과
    --1.장원석 
        INSERT INTO RESULT
        VALUES('P001', 'SU01', 1, 'S001', 1, 77, TO_DATE('20200611'));

        INSERT INTO RESULT
        VALUES('P001', 'SU02', 2, 'S001', 2, 79, TO_DATE('20200613'));

        INSERT INTO RESULT
        VALUES('P002', 'SU03', 3, 'S001', 3, 88, TO_DATE('20200615'));


--2.박재영 
        INSERT INTO RESULT
        VALUES('P001', 'SU01', 1, 'S002', 4, 87, TO_DATE('20200611'));

        INSERT INTO RESULT
        VALUES('P001', 'SU02', 2, 'S002', 5, 69, TO_DATE('20200613'));

        INSERT INTO RESULT
        VALUES('P002', 'SU03', 3, 'S002', 6, 78, TO_DATE('20200615'));

    --최상훈
        INSERT INTO RESULT
        VALUES('P001', 'SU01', 1, 'S003', 7, 67, TO_DATE('20200611'));

        INSERT INTO RESULT
        VALUES('P001', 'SU02', 2, 'S003', 8, 89, TO_DATE('20200613'));

        INSERT INTO RESULT
        VALUES('P002', 'SU03', 3, 'S003', 9, 68, TO_DATE('20200615'));


    --김용수
        INSERT INTO RESULT
        VALUES('P001', 'SU01', 1, 'S004', 10, 77, TO_DATE('20200611'));

        INSERT INTO RESULT
        VALUES('P001', 'SU02', 2, 'S004', 11, 92, TO_DATE('20200613'));

        INSERT INTO RESULT
        VALUES('P002', 'SU03', 3, 'S004', 12, 59, TO_DATE('20200615'));


    --수학과
    
        --최두원
        INSERT INTO RESULT
        VALUES('P003', 'SU04', 4, 'S005', 13, 80, TO_DATE('20200612'));

        INSERT INTO RESULT
        VALUES('P003', 'SU05', 5, 'S005', 14, 82, TO_DATE('20200612'));

        INSERT INTO RESULT
        VALUES('P004', 'SU06', 6, 'S005', 15, 71, TO_DATE('20200613'));

        INSERT INTO RESULT
        VALUES('P004', 'SU07', 7, 'S005', 16, 58, TO_DATE('20200613'));


        --안상균
        INSERT INTO RESULT
        VALUES('P003', 'SU04', 4, 'S006', 17, 70, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P003', 'SU05', 5, 'S006', 18, 77, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P004', 'SU06', 6, 'S006', 19, 79, TO_DATE('20200613'));
        INSERT INTO RESULT
        VALUES('P004', 'SU07', 7, 'S006', 20, 89, TO_DATE('20200613'));


        --김주희
        INSERT INTO RESULT
        VALUES('P003', 'SU04', 4, 'S007', 21, 60, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P003', 'SU05', 5, 'S007', 22, 57, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P004', 'SU06', 6, 'S007', 23, 89, TO_DATE('20200613'));
        INSERT INTO RESULT
        VALUES('P004', 'SU07', 7, 'S007', 24, 92, TO_DATE('20200613'));

        --강석순
        INSERT INTO RESULT
        VALUES('P003', 'SU04', 4, 'S008', 25, 56, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P003', 'SU05', 5, 'S008', 26, 83, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P004', 'SU06', 6, 'S008', 27, 90, TO_DATE('20200613'));
        INSERT INTO RESULT
        VALUES('P004', 'SU07', 7, 'S008', 28, 78, TO_DATE('20200613'));

--이재혁
        INSERT INTO RESULT
        VALUES('P003', 'SU04', 4, 'S009', 29, 67, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P003', 'SU05', 5, 'S009', 30, 90, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P004', 'SU06', 6, 'S009', 31, 74, TO_DATE('20200613'));
        INSERT INTO RESULT
        VALUES('P004', 'SU07', 7, 'S009', 32, 72, TO_DATE('20200613'));

    --경제학과
    --박소연
        INSERT INTO RESULT
        VALUES('P005', 'SU08', 8, 'S011', 33, 69, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P006', 'SU09', 9, 'S011', 34, 77, TO_DATE('20200612'));
     --이영효
        INSERT INTO RESULT
        VALUES('P005', 'SU08', 8, 'S012', 35, 99, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P006', 'SU09', 9, 'S012', 36, 57, TO_DATE('20200612'));
      --박가나
        INSERT INTO RESULT
        VALUES('P005', 'SU08', 8, 'S010', 37, 79, TO_DATE('20200612'));
        INSERT INTO RESULT
        VALUES('P006', 'SU09', 9, 'S010', 38, 97, TO_DATE('20200612'));
        
        commit;
        delete from result where pid='P001';
        drop table result;
        select * from result;
        
   
        
        --16:00시작

Q.  학과 과목 학생이름 점수  시험결과를 나타내야 한다.   정렬은 학과별 학생별
--1단계 
SELECT * 
FROM RESULT R1, STUDENTS2 S1
WHERE R1.SID = S1.SID;

--2단계
SELECT *
FROM RESULT R1, STUDENTS2 S1, SUBJECTS2 S2
WHERE R1.SID = S1.SID
AND R1.SUID = S2.SUID;

--3단계
SELECT *
FROM RESULT R1, STUDENTS2 S1, SUBJECTS2 S2,DEPARTS D1
WHERE R1.SID = S1.SID
AND R1.SUID = S2.SUID
AND S2.DID = D1.DID
;

SELECT D1.DNAME,S1.SNAME, S2.SUNAME, R1.SCORE
FROM RESULT R1 , STUDENTS2 S1, SUBJECTS2 S2, DEPARTS D1
WHERE R1.SID = S1.SID
AND R1.SUID = S2.SUID
AND S2.DID = D1.DID
ORDER BY D1.DNAME ASC , S1.SNAME ASC, S2.SUNAME ASC
;
-----------------------

Q. 학생들의 시험결과 - 시험을 치지 않은 학생은 0점 처리
학생이 1 :  시험을 치면 시험결과에 N

SELECT *
FROM STUDENTS2 T1, RESULT T2, SUBJECTS2 T3
WHERE T1.SID = T2.SID(+)
AND T2.SUID = T3.SUID(+) --이걸 추가하면 민희가 없어진다.. 그러면 안되잖아 NULL을 찾고있는데 
;

--학생들의 시험 총점, 평균, 등수
--학과, 학생이름, 총점, 평균,등수
SELECT T1.SID
, T1.SNAME
, SUM(T2.SCORE)
, ROUND(AVG(NVL(T2.SCORE,0)),1)
, MAX(T4.DNAME) AS DNAME
, RANK() OVER (ORDER BY AVG(NVL(T2.SCORE,0)) DESC) AS RNK
FROM STUDENTS2 T1, RESULT T2, SUBJECTS2 T3, DEPARTS T4
WHERE T1.SID = T2.SID(+)
AND T2.SUID = T3.SUID(+)
AND T1.DID = T4.DID(+)
GROUP BY T1.SID ,T1.SNAME
;
--------------------------------------------------------
       SELECT A.DNAME, A.SNAME, A.TOTSCORE, A.AVGSCORE, A.DID
       ,RANK() OVER(PARTITION BY A.DID ORDER BY  A.AVGSCORE DESC) AS RNK
FROM
(
SELECT      T3.DNAME, T1.SNAME
            , SUM(NVL(T2.SCORE, 0)) AS TOTSCORE
            , ROUND(AVG(NVL(T2.SCORE, 0)),1) AS AVGSCORE
            , MAX(T1.DID) AS DID
            , RANK() OVER(PARTITION BY MAX(T1.DID) ORDER BY ROUND(AVG(NVL(T2.SCORE, 0)),1) DESC) AS RNK
FROM        STUDENTS2 T1,  RESULT T2, DEPARTS T3
WHERE       T1.SID = T2.SID(+)
AND         T1.DID = T3.DID
GROUP BY    T3.DNAME, T1.SNAME
ORDER BY    1 ASC, 2 ASC
) A
;

--교수들이 시험지를 내고 학생들이 시험을 쳤다. 그래서 그 결과에서 어떤 교수가 낸 시험문제가 제일 쉬웠는지 확인한다.
-- 점수가 제일 높고 그걸 순위로 낸다.
-- 총점 평균 순위를 낸다. X 교수가 낸 시험문제의 총점 

--내가한것....
SELECT S2.PID,S2.SUID, SUM(R1.SCORE)
FROM STUDENTS2 S1, RESULT R1, SUBJECTS2 S2, DEPARTS D1
WHERE S1.SID = R1.SID 
AND R1.SUID= S2.SUID
AND S1.DID = D1.DID
GROUP BY S2.PID,S2.SUID
;
--한 교수가 시험문제를 한게 낸 경우도 있고 여러개 낸것도 있고
--RESULT 의 PID SUID SEQ 가 시험 ROW 이고 그것의 점수가 77이다 
--한줄이 한 사람의 한과목의 점수 

SELECT P1.PID, P1.PNAME, SUM (R1.SCORE),AVG(R1.SCORE)
FROM PROFS P1, RESULT R1
WHERE P1.PID= R1.PID
GROUP BY P1.PID, P1.PNAME
;

----------------------------------
--SELECT 는 ROW에 대한 명령어.... FROM 은 ROW를 만들어오고 
SELECT LEVEL FROM DUAL  
CONNECT BY LEVEL <= 30;

SELECT LEVEL +3 AS LVL FROM DUAL 
CONNECT BY LEVEL <=3;
--FROM DUAL 뒤에서 ROW를 3개 만들어 놓는다. 그래서 SYSDATE는 3개가 나옴../.
SELECT SYSDATE FROM DUAL 
CONNECT BY LEVEL <=3;

SELECT SYSDATE + LEVEL FROM DUAL
CONNECT BY LEVEL <=3;

SELECT '2020-01-01' , LEVEL FROM DUAL
CONNECT BY LEVEL <=31;

SELECT TO_DATE('2020-01-01') , LEVEL FROM DUAL
CONNECT BY LEVEL <=31;

SELECT TO_DATE('2020-01-01') + (LEVEL-1) AS "DATE" FROM DUAL
CONNECT BY LEVEL <=31;

--왼쪽에 6월 날짜를 쭉 찍고 , 오른쪽에 시험친 점수의 총점을 구하기 , 시험이 없던 날은 0 
--1단계
SELECT RDATE, SUM(SCORE)
FROM RESULT 
GROUP BY RDATE;
--2단계 날짜로 조인하는건 안좋다 그래서 -> 
SELECT TO_CHAR(RDATE,'YYYY-MM-DD'), SUM(SCORE)
FROM RESULT 
GROUP BY RDATE;
--3단계 왼쪽에 올 날짜
SELECT '2020-06-01', LEVEL
    ,TO_DATE('2020-06-01') + (LEVEL-1)
FROM DUAL 
CONNECT BY LEVEL <=30;
--4단계
SELECT --'2020-06-01', LEVEL
    TO_CHAR( TO_DATE('2020-06-01') + (LEVEL-1), 'YYYYMMDD')AS LDATE
FROM DUAL 
CONNECT BY LEVEL <=30;

--5단계 
SELECT B.LDATE,NVL(A.TOT,0)
FROM
(
SELECT RDATE, SUM(SCORE) AS TOT
FROM RESULT 
GROUP BY RDATE
)A,
(
SELECT TO_CHAR( TO_DATE('2020-06-01') + (LEVEL-1), 'YYYYMMDD')AS LDATE
FROM DUAL 
CONNECT BY LEVEL <=30
)B
WHERE A.RDATE(+) = B.LDATE
ORDER BY B.LDATE;

---송지현
SELECT A.LVL, DECODE(SUM(R.SCORE), NULL, '시험안침', SUM(R.SCORE)) AS TOT
FROM
(
    SELECT TO_DATE('2020-06-01')+ (LEVEL-1) LVL FROM DUAL
    CONNECT BY LEVEL <= 30
)A
, RESULT R
WHERE A.LVL = R.RDATE(+)
GROUP BY A.LVL, R.RDATE
ORDER BY A.LVL;

--태화 .. 
SELECT B.RDATE
FROM(
SELECT TO_DATE('2020-06-01') + (LEVEL-1) AS "a"
FROM DUAL
CONNECT BY LEVEL <=31
)A,
(
SELECT R1.PID,R1.SUID,SUM(R1.SCORE),R1.RDATE
FROM RESULT R1
GROUP BY R1.PID,R1.SUID
)B
WHERE A.a = B.RDATE
;

----------60점 이하 점수를 받은 학과, 과목, 학생 
0.
SELECT S1.SNAME , R1.SCORE
FROM RESULT R1, STUDENTS2 S1
WHERE R1.SID = S1.SID
;

1.
SELECT S1.SNAME , R1.SCORE
FROM RESULT R1, STUDENTS2 S1
WHERE R1.SID = S1.SID
AND R1.SCORE <= 60
;

2.
SELECT *--S1.SNAME , R1.SCORE
FROM RESULT R1, STUDENTS2 S1
WHERE R1.SID(+) = S1.SID
AND NVL(R1.SCORE,0) <= 60
;

3. 과목 
SELECT S2.SUNAME, S1.SNAME , R1.SCORE
FROM RESULT R1, STUDENTS2 S1, SUBJECTS2 S2
WHERE R1.SID(+) = S1.SID
AND S2.DID = S1.DID
AND NVL(R1.SCORE,0) <= 60
;

3. 학과
SELECT D1.DNAME ,S2.SUNAME, S1.SNAME , R1.SCORE
FROM RESULT R1, STUDENTS2 S1, SUBJECTS2 S2, DEPARTS D1
WHERE R1.SID(+) = S1.SID
AND S2.DID = S1.DID
AND D1.DID = S2.DID
AND NVL(R1.SCORE,0) <= 60
;

--결과값 
SELECT T.SNAME, T.DNAME, T.SUNAME, DECODE(R.SCORE, NULL, '미응시', R.SCORE) SCORE
FROM   (
        SELECT   S.SID, S.SNAME, SU.SUID, SU.SUNAME, D.DID, D.DNAME
        FROM     STUDENTS S, DEPARTMENTS D, SUBJECTS SU
        WHERE    S.DID = D.DID
          AND    S.DID = SU.DID
        ORDER BY S.SID, S.DID, SU.SUID
       ) T, RESULTS R
WHERE  T.SID = R.SID(+)
  AND  T.SUID = R.SUID(+)
  AND  NVL(R.SCORE, 0) < 60;
  

--선생님
   SELECT * FROM
    (
    SELECT  T1.SID, T3.SUID
    FROM STUDENTS2 T1, DEPARTS T2, SUBJECTS2 T3
    WHERE T1.DID = T2.DID
    AND T1.DID = T3.DID
    ) A, RESULT B 
    WHERE A.SID = B.SID(+) 
    AND A.SUID = B.SUID(+)
    AND NVL(B.SCORE,0) <= 60
    ;

--평균 점수가 가장 높은 시험문제를 출제한 교수의 시험과목
1.학생이 시험친 과목중에 평균점수가 가장 높은 시험문제를 찾아라.
SELECT SID,AVG(SCORE)
,RANK() OVER (ORDER BY AVG(SCORE) DESC ) AS RNK
FROM RESULT
GROUP BY SID;

SELECT SID FROM
(
SELECT SID,AVG(SCORE), MAX(PID) AS PID
,RANK() OVER (ORDER BY AVG(SCORE) DESC ) AS RNK
FROM RESULT
GROUP BY SID
) WHERE RNK =1
;

SELECT * 
FROM 
(
    SELECT SID, AVGE, PID  FROM
    (
    SELECT SID,AVG(SCORE) AS AVGE, MAX(PID) AS PID
    ,RANK() OVER (ORDER BY AVG(SCORE) DESC ) AS RNK 
    FROM RESULT
    GROUP BY SID
    ) WHERE RNK =1 
) A, EXAMS B, SUBJECTS2 C
WHERE A.PID = B.PID 
AND B.SUID = C.SUID
;

SELECT PID, AVG(SCORE)
FROM RESULT 
GROUP BY SUID
ORDER BY AVG(SCORE)DESC ; 






