select * from products;
select * from orders;
select * from members;

--1. 백업ORDERS 생성
CREATE TABLE ORDERS_BK_20200616
AS SELECT * FROM ORDERS
;
--1. 백업PRODUCTS 
CREATE TABLE PRODUCTS_BK_20200616
AS SELECT * FROM PRODUCTS
;

--2. 새로운 ORDERS2 생성
CREATE TABLE ORDERS
(
  M_ID CHAR(4 BYTE) NOT NULL 
, PR_ID CHAR(4 BYTE) NOT NULL 
, O_ID NUMBER(7, 0) NOT NULL 
, PR_PRICE NUMBER(6,2) NOT NULL
, QTY NUMBER(7, 0) NOT NULL 
) ;



--해당 테이블 오른쪽 눌러서 테이블편집가서 DDL 가서 생성눌러서 복사해옴

--3. ORDERS BK 데이터를 ORDERS2 에 옮긴다.
INSERT INTO ORDERS2
SELECT M_ID, PR_ID, O_ID, 1, QTY FROM ORDERS_BK_20200616;

--4.ORDERS2의 테이블이름을 편집으로 변경한다.

SELECT * FROM ORDERS;
SELECT * FROM PRODUCTS;
SELECT * FROM MEMBERS;

--5.입고테이블 생성
CREATE TABLE WAREHOUSING
(
    W_ID CHAR(4) NOT NULL PRIMARY KEY,
    P_ID CHAR(4) NOT NULL,
    W_PRICE NUMBER(6,2) NOT NULL,
    Q_QTY NUMBER(7) NOT NULL,
    W_DATE DATE NOT NULL
);

INSERT INTO warehousing
VALUES('W001','P001',200,10,TO_DATE('2020-06-01'));
INSERT INTO warehousing
VALUES('W002','P001',220,15,TO_DATE('2020-06-10'));
INSERT INTO warehousing
VALUES('W003','P001',190,20,TO_DATE('2020-06-20'));
INSERT INTO warehousing
VALUES('W004','P002',380,20,TO_DATE('2020-06-02'));
INSERT INTO warehousing
VALUES('W005','P002',390,20,TO_DATE('2020-06-21'));

COMMIT;

--ORDERS 테이블에 컬럼 추가 -> 판매날짜 
ALTER TABLE ORDERS ADD (O_DATE DATE);

--새우깡의 입고개수
SELECT * FROM warehousing WHERE P_ID = 'P001';

SELECT SUM(Q_QTY) FROM warehousing WHERE P_ID = 'P001';

--새우깡의 입고개수 업데이트
UPDATE PRODUCTS SET PR_QTY =
(
    SELECT SUM(Q_QTY) FROM warehousing
    WHERE P_ID = 'P002'
)
WHERE PR_ID = 'P002'
;

--메로나의 입고개수 업데이트
UPDATE PRODUCTS SET PR_QTY =
(
    SELECT SUM(Q_QTY) FROM warehousing
    WHERE P_ID = 'P002'
)
WHERE PR_ID = 'P002'
;

--각 상품별로 남아있는 개수 조회
/*
    새우깡 : 23 
    메로나 : 22 
*/

--새우깡의 주문 개수
SELECT P1.PR_NAME,SUM(O1.QTY)
FROM PRODUCTS P1, ORDERS O1
WHERE P1.PR_ID=O1.PR_ID 
AND P1.PR_ID='P001' 
GROUP BY P1.PR_NAME
;
--새우깡의 입고개수
SELECT W1.W_DATE,P1.PR_NAME, W1.Q_QTY 
FROM WAREHOUSING W1, PRODUCTS P1
WHERE W1.P_ID = P1.PR_ID 
AND P1.PR_ID='P001'
;

--새우깡의 총 입고개수
SELECT P1.PR_NAME, SUM(W1.Q_QTY)
FROM WAREHOUSING W1, PRODUCTS P1
WHERE W1.P_ID = P1.PR_ID 
AND P1.PR_ID='P001'
GROUP BY P1.PR_NAME 
;


--각 상품별 입고 개수
SELECT T1.P_ID, T2.PR_NAME, T1.Q_QTY
FROM WAREHOUSING T1, PRODUCTS T2
WHERE T1.P_ID = T2.PR_ID;
 -- 매칭이 안되는 부분은 누락이 돼버리고 나머지만 join하게 됩니다.
 
--상품별 입고 총 개수
SELECT T1.P_ID, T2.PR_NAME, SUM(T1.Q_QTY)
FROM WAREHOUSING T1, PRODUCTS T2
WHERE T1.P_ID = T2.PR_ID
GROUP BY T1.P_ID , T2.PR_NAME;
-- 그룹화를 시켜준다

--아니 각 이름별로 메로나 새우깡 소고기의 총 가격
SELECT T1.P_ID, T2.PR_NAME, SUM(T1.Q_QTY*T2.PR_PRICE) AS TOTAL
FROM WAREHOUSING T1, PRODUCTS T2
WHERE T1.P_ID = T2.PR_ID
GROUP BY T1.P_ID , T2.PR_NAME;


재고 = ( 매로나가 입고된 개수 - 매로나가 판매한 개수) = 

--내가한것
SELECT A.P_ID, B.PR_NAME, A.REMAIN1-B.REMAIN2
FROM 
(
SELECT W1.P_ID,SUM(W1.Q_QTY) AS REMAIN1
FROM WAREHOUSING W1
WHERE W1.P_ID='P002'
GROUP BY W1.P_ID
) A,
(SELECT P1.PR_ID,P1.PR_NAME,SUM(O1.QTY) AS REMAIN2
FROM ORDERS O1, PRODUCTS P1
WHERE O1.PR_ID = P1.PR_ID
AND O1.PR_ID = 'P002'
GROUP BY P1.PR_ID,P1.PR_NAME
) B;

--
SELECT A.P_ID, A.PR_NAME, A.W_QTY, B.O_QTY 
    , (A.W_QTY - B.O_QTY) AS ST_QTY
FROM 
(
    SELECT T1.P_ID, T2.PR_NAME, SUM(T1.Q_QTY) AS W_QTY
    FROM WAREHOUSING T1, PRODUCTS T2
    WHERE T1.P_ID = T2.PR_ID
    GROUP BY T1.P_ID , T2.PR_NAME
)A 
,
(
    SELECT T1.PR_ID, T2.PR_NAME, SUM(T1.QTY) AS O_QTY
    FROM ORDERS T1, PRODUCTS T2
    WHERE T1.PR_ID = T2.PR_ID
    GROUP BY T1.PR_ID, T2.PR_NAME
)B
WHERE A.P_ID = B.PR_ID
;
SELECT * 
FROM 
(
  SELECT T1.P_ID, T2.PR_NAME, SUM(T1.Q_QTY) AS W_QTY
    FROM WAREHOUSING T1, PRODUCTS T2
    WHERE T1.P_ID = T2.PR_ID
    GROUP BY T1.P_ID , T2.PR_NAME
    )A
    ,
    ( SELECT T1.PR_ID, T2.PR_NAME, SUM(T1.QTY) AS O_QTY
    FROM ORDERS T1, PRODUCTS T2
    WHERE T1.PR_ID = T2.PR_ID
    GROUP BY T1.PR_ID, T2.PR_NAME)
    B
WHERE A.PR_NAME = B.PR_NAME;
------------------------

--상품 추가(상품리스트에 상품을 추가하는데 미리 상품테이블에 추가시켜야 입고테이블에 상품을 추가시킨다.) 
INSERT INTO PRODUCTS VALUES('P003','설탕',0,0);
COMMIT;

--
SELECT  * 
FROM PRODUCTS T1, WAREHOUSING T2
WHERE T1.PR_ID = T2.P_ID(+);

--설탕의 재고 
SELECT  T1.PR_ID, T1.PR_NAME, NVL(SUM(T2.Q_QTY),0) AS W_QTY
FROM PRODUCTS T1, WAREHOUSING T2
WHERE T1.PR_ID = T2.P_ID(+)
GROUP BY T1.PR_ID, T1.PR_NAME
ORDER BY PR_ID
;

SELECT T1.PR_ID, T1.PR_NAME, NVL(SUM(T2.QTY),0) AS Q_QTY
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
GROUP BY T1.PR_ID, T1.PR_NAME
;

SELECT A.PR_ID, A.PR_NAME, A.W_QTY, B.Q_QTY
    , (A.W_QTY  - B.Q_QTY) AS ST_QTY FROM
(
SELECT  T1.PR_ID, T1.PR_NAME, NVL(SUM(T2.Q_QTY),0) AS W_QTY
FROM PRODUCTS T1, WAREHOUSING T2
WHERE T1.PR_ID = T2.P_ID(+)
GROUP BY T1.PR_ID, T1.PR_NAME
ORDER BY PR_ID
) A,
(
SELECT T1.PR_ID, T1.PR_NAME, NVL(SUM(T2.QTY),0) AS Q_QTY
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
GROUP BY T1.PR_ID, T1.PR_NAME
)B 
WHERE A.PR_ID = B.PR_ID
ORDER BY A.PR_ID ASC
;
--------------------------여기까지는 꾸역꾸역 이해함 

--상품별 순이익 ( 매출액 - 매입액 ) 순위
SELECT A.PR_NAME, A.PR_ID, A.매출액-B.매입액  순이익 FROM
(SELECT T2.PR_NAME, T1.PR_ID, SUM(T1.PR_PRICE*T1.QTY ) 매출액
 FROM  ORDERS T1, PRODUCTS T2
 WHERE t1.pr_id = t2.pr_id
 GROUP BY T2.PR_NAME, T1.PR_ID
 ) A, 
(SELECT T2.PR_NAME, T1.P_ID, SUM(T1.W_PRICE*T1.Q_QTY) 매입액
 FROM  WAREHOUSING T1, PRODUCTS T2
 WHERE T1.P_ID = T2.PR_ID
 GROUP BY T2.PR_NAME, T1.P_ID
) B
 WHERE A.PR_ID = B.P_ID
;

--------18:30  ~ 
--상품별 매출액 뽑기 
---1. 먼저 보기
SELECT *
FROM ORDERS;
SELECT * 
FROM PRODUCTS;

--2. 먼저 상품별 NULL도 보여줘야 하나 말아야 하나 판단하고 . 상품별이니깐 상품이 먼저와야함

SELECT *
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID
; --이 쿼리는 사실 이름을 보기 위해서 

--3 PRODUCT가  1 ORDER이 N   -> 1: N 구조
SELECT T1.PR_ID, T1.PR_NAME, T2.PR_PRICE, T2.QTY
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
;
--매출액이니깐 PRICE * QTY를 하면 매출액이 된다. 
SELECT T1.PR_ID, T1.PR_NAME, T2.PR_PRICE, T2.QTY
, T2.PR_PRICE * T2.QTY AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
;

--근데 어떻게 그룹화를 할꺼인지...에서 1500 900 2400 
SELECT T1.PR_ID, T1.PR_NAME --, T2.PR_PRICE, T2.QTY
, SUM(T2.PR_PRICE * T2.QTY) AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
GROUP BY T1.PR_ID, T1.PR_NAME 
;
--그런데 나는 PR_PRICE와 QTY도 보여주고 싶은데 GROUP BY 에 넣으면 왜 안돼? 
SELECT T1.PR_ID, T1.PR_NAME , T2.PR_PRICE, T2.QTY
, T2.PR_PRICE * T2.QTY AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
AND T1.PR_ID = 'P001'
;

SELECT T1.PR_ID, T1.PR_NAME  ,SUM(T2.QTY) AS QTY --, T2.PR_PRICE,
, SUM(T2.PR_PRICE * T2.QTY) AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
AND T1.PR_ID = 'P001'
GROUP BY T1.PR_ID, T1.PR_NAME
;
--단가도 보여줘 ,, 각각의 단가. 300원 400원에 근데 한줄에 각각을 보여줄수 없다.
SELECT T1.PR_ID, T1.PR_NAME  ,SUM(T2.QTY) AS QTY , AVG(T2.PR_PRICE) AS AVG_PRICE
, SUM(T2.PR_PRICE * T2.QTY) AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
AND T1.PR_ID = 'P001'
GROUP BY T1.PR_ID, T1.PR_NAME
;

SELECT T1.PR_ID, T1.PR_NAME  ,SUM(T2.QTY) AS QTY , AVG(T2.PR_PRICE) AS AVG_PRICE
, SUM(T2.PR_PRICE * T2.QTY) AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
--AND T1.PR_ID = 'P001'
GROUP BY T1.PR_ID, T1.PR_NAME
;
--입고 가격도 찍고싶다 , 매입리스트 
SELECT * FROM PRODUCTS T1, WAREHOUSING T2
WHERE T1.PR_ID = T2.P_ID;

--매입단가 매입수량 매입 총가격
SELECT T1.PR_ID, T1.PR_NAME, T2.W_PRICE, T2.Q_QTY
    , T2.W_PRICE * T2.Q_QTY
FROM PRODUCTS T1, WAREHOUSING T2
WHERE T1.PR_ID = T2.P_ID;

--여기서는 가격을 GROUP BY 못하잖아 가격이 다다르니깐.
SELECT A.PR_ID, A.PR_NAME, A.T_PRICE, B.T_PRICE
    , A.T_PRICE - B.T_PRICE AS T_PROFIT
    FROM
(
SELECT T1.PR_ID, T1.PR_NAME  ,SUM(T2.QTY) AS QTY , AVG(T2.PR_PRICE) AS AVG_PRICE
, SUM(T2.PR_PRICE * T2.QTY) AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
GROUP BY T1.PR_ID, T1.PR_NAME
)
A,
(
SELECT T1.PR_ID, T1.PR_NAME
, ROUND(AVG(T2.W_PRICE),1) AS AVG_PRICE
, ROUND(SUM(T2.Q_QTY),1) AS QTY
, SUM( T2.W_PRICE * T2.Q_QTY) AS T_PRICE
FROM PRODUCTS T1, WAREHOUSING T2
WHERE T1.PR_ID = T2.P_ID(+)
GROUP BY T1.PR_ID, T1.PR_NAME
)B 
WHERE A.PR_ID = B.PR_ID
;
--------~~~~ 19:00




--새로운 상품 추가
INSERT INTO PRODUCTS VALUES('P004','소고기',0,0);
--새로운 입고 추가
INSERT INTO WAREHOUSING VALUES('W006','P004',5000,10,TO_DATE('2020/06/16'));

--날짜별 상품별 판매수량 매출 ( 2020 06 01 ~ 2020 06 30 )   -- 못품
    날짜   상품   수량   매출
20200601 새우깡   0      0
20200601 메로나   0      0
20200601 설탕   0      0
20200601 소고기   0      0
20200601 새우깡   0      0
20200601 메로나   0      0
20200601 설탕   0      0
20200601 소고기   0      0

--내가한것 
SELECT A.W_DATE, A.PR_NAME, A.Q_QTY, B.매출액 FROM
(
SELECT P1.PR_ID,W_DATE, P1.PR_NAME,W1.Q_QTY
FROM WAREHOUSING W1, PRODUCTS P1
WHERE P1.PR_ID = W1.P_ID(+)
)
A,
(
SELECT P1.PR_ID,P1.PR_NAME, P1.PR_PRICE * O1.QTY AS 매출액
FROM ORDERS O1, PRODUCTS P1
WHERE O1.PR_ID = P1.PR_ID
)
B
WHERE A.PR_ID = B.PR_ID
;
----------------  19:00 ~ 
SELECT *
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
;
--매출이고 T1.PR_ID, T1.PR_NAME 가 1:1 이니깐
SELECT T1.PR_ID, T1.PR_NAME, T2.PR_PRICE, T2.QTY
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
;

SELECT T1.PR_ID, T1.PR_NAME, SUM(T2.PR_PRICE * T2.QTY) AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
GROUP BY T1.PR_ID, T1.PR_NAME
;

--날짜 때문에 ㅠㅠㅠㅠ 이게 곧 날짜별 매출임 날짜 별 !! 날짜별 상품별이니깐 
SELECT * FROM ORDERS;

INSERT INTO ORDERS VALUES('M001','P001',5,300,7,TO_DATE('2020-06-01'));
INSERT INTO ORDERS VALUES('M001','P002',6,500,2,TO_DATE('2020-06-01'));
DE
--6월 
SELECT * FROM ORDERS 
WHERE TO_CHAR(O_DATE,'YYYYMMDD')='20200601'
;
--날짜별 상품별로 하면 결과가 6월1일날 새우깡 

--상품이름이 있어야 조인이 가능해서 먼저 
SELECT * FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
;

SELECT T1.PR_ID, T1.PR_NAME, T2.PR_PRICE * T2.QTY,
TO_CHAR(O_DATE,'YYYY-MM-DD') AS O_DATE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
;
--AND TO_CHAR(O_DATE, 'YYYYMMDD') LIKE '%20200601%'
;

--이게 오른쪽 부분
SELECT T1.PR_ID, T1.PR_NAME
,TO_CHAR(O_DATE,'YYYY-MM-DD') AS O_DATE
,SUM(T2.PR_PRICE * T2.QTY) AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
GROUP BY T1.PR_ID , T1.PR_NAME, TO_CHAR(O_DATE,'YYYY-MM-DD')
;

--이제 왼쪽부분 2020 6 1 ~ 2020 6 30 일까지 만들기
SELECT LEVEL
FROM DUAL
CONNECT BY LEVEL <= 30;

--똑같이 맞춰줘야 JOIN이 가능하대 
SELECT TO_CHAR(TO_DATE('2020-06-01') + (LEVEL -1),'YYYY-MM-DD') AS B_DATE
FROM DUAL
CONNECT BY LEVEL <= 30
;
--왼쪽 부분 6.1 ~ 6.30일까지 A / B랑 CROSS JOIN 해서 
SELECT * FROM
(
SELECT TO_CHAR(TO_DATE('2020-06-01') + (LEVEL -1),'YYYY-MM-DD') AS B_DATE
FROM DUAL
CONNECT BY LEVEL <= 30
) A
,
(
SELECT PR_ID, PR_NAME FROM PRODUCTS
) B
ORDER BY A.B_DATE ASC,  B.PR_ID --콤마가 2개오면 먼저 날짜별 하고 ID 를 내부정렬 한다.
;
--그 다음 단계 

SELECT * FROM
(
SELECT TO_CHAR(TO_DATE('2020-06-01') + (LEVEL -1),'YYYY-MM-DD') AS B_DATE
FROM DUAL
CONNECT BY LEVEL <= 30
) A
,
(
SELECT PR_ID, PR_NAME FROM PRODUCTS
) B
ORDER BY A.B_DATE ASC,  B.PR_ID --콤마가 2개오면 먼저 날짜별 하고 ID 를 내부정렬 한다.
;

--오른쪽 부분 
SELECT T1.PR_ID, T1.PR_NAME
,TO_CHAR(O_DATE,'YYYY-MM-DD') AS O_DATE
,SUM(T2.PR_PRICE * T2.QTY) AS T_PRICE
FROM PRODUCTS T1, ORDERS T2
WHERE T1.PR_ID = T2.PR_ID(+)
GROUP BY T1.PR_ID , T1.PR_NAME, TO_CHAR(O_DATE,'YYYY-MM-DD')
;

 SELECT * FROM
    (
        SELECT * FROM 
        (
            SELECT TO_CHAR(TO_DATE('2020-06-01') + (LEVEL - 1), 'YYYY-MM-DD') AS B_DATE
            FROM DUAL
            CONNECT BY LEVEL <= 30
        ) A
        ,
        (
            SELECT PR_ID, PR_NAME FROM PRODUCTS
        ) B
        ORDER BY A.B_DATE ASC, B.PR_ID
    ) C
    ,
    (
    SELECT T1.PR_ID, T1.PR_NAME
            , TO_CHAR(O_DATE, 'YYYY-MM-DD') AS O_DATE
            , SUM(T2.PR_PRICE * T2.QTY) AS T_PRICE
    FROM PRODUCTS T1, ORDERS T2
    WHERE  T1.PR_ID = T2.PR_ID(+)
    GROUP BY T1.PR_ID, T1.PR_NAME, TO_CHAR(O_DATE, 'YYYY-MM-DD')
    ) D
    WHERE C.PR_ID = D.PR_ID(+)
    AND C.B_DATE = D.O_DATE(+)
;
------------------ ~ 19:30
------------------ 20:00 ~
SELECT * FROM ORDERS;--주문 , 판매 테이블  상품이 팔려나가면 여기에서 쌓인다. 어떤 상품이 팔렸는지가 여기에 쌓임. 누가 ,어떤 상품을 샀는지...  이게 6월달 한 달 실적이다.
SELECT * FROM PRODUCTS; --상품테이블 , 4개의 상품이 있다. 상품 1 이고 ORDERS 는 N 이다.     현재 ORDER과 PRODUCTS를 비교해보면  
--M_ID, PR_ID을 고객에게 영문으로 보여주면 안되잖아 , 그래서 주문테이블에서  M001에 대한 정보는 MEMBER에 있고 PR_ID는 상품테이블에 있잖아
--




SELECT T3.M_NAME, T2.PR_NAME, T1.PR_PRICE, T1.QTY
, TO_CHAR(T1.O_DATE, 'YYYY-MM-DD') AS O_DATE
FROM ORDERS T1, PRODUCTS T2, MEMBERS T3
WHERE T1.PR_ID = T2.PR_ID
AND T1.M_ID = T3.M_ID
;

--매입 리스트를 상품명, 단가, 수량, 날짜 순으로 표시
SELECT P1.PR_NAME,O1.PR_PRICE,O1.QTY,O1.O_DATE
FROM PRODUCTS P1, ORDERS O1
WHERE P1.PR_ID = O1.PR_ID 
;
--시발 ..이렇게 해야하네 ㅋㅋㅋ
SELECT P1.PR_NAME,W1.W_PRICE,W1.Q_QTY,W1.W_DATE
FROM PRODUCTS P1, WAREHOUSING W1
WHERE P1.PR_ID = W1.P_ID 
;

--회원중 상품을 한번도 구매하지 않는 회원
SELECT *
FROM MEMBERS M1, ORDERS O1
WHERE M1.M_ID= O1.M_ID;

SELECT *
FROM MEMBERS M1, ORDERS O1
WHERE M1.M_ID= O1.M_ID(+);

SELECT *
FROM MEMBERS M1, ORDERS O1
WHERE M1.M_ID= O1.M_ID(+)
AND O1.O_ID IS NULL
;

--홍길동 고객이 구매한 상품과 그 상품의 총 가격
SELECT M1.M_ID , M1.M_NAME, P1.PR_ID, P1.PR_NAME, SUM(O1.PR_PRICE * O1.QTY) AS T_PRICE
FROM MEMBERS M1, ORDERS O1, PRODUCTS P1
WHERE M1.M_ID = O1.M_ID
AND O1.PR_ID = P1.PR_ID
AND M1.M_NAME = '홍길동'
GROUP BY  M1.M_ID , M1.M_NAME, P1.PR_ID, P1.PR_NAME
;

-- 가장 많이  팔린 상품은?
SELECT P1.PR_NAME, SUM(O1.QTY)
FROM ORDERS O1, PRODUCTS P1
WHERE O1.PR_ID = P1.PR_ID 
GROUP BY P1.PR_NAME;

SELECT ROWNUM, X.*
FROM
( 
SELECT P1.PR_NAME, SUM(O1.QTY)
FROM ORDERS O1, PRODUCTS P1
WHERE O1.PR_ID = P1.PR_ID 
GROUP BY P1.PR_NAME
ORDER BY SUM(O1.QTY) DESC
) X 
WHERE ROWNUM = 1;







COMMIT;





------------------- 21:30













------------------------5교시 시작
SELECT * FROM MEMBERS;
UPDATE MEMBERS 
SET GENDER = 'M', REGION = '부산'
;
commit;

select * from members;
INSERT into members values('M001','금비','F','서울');



--------------------------6교시
    /*공통코드 그룹 테이블 */  
  CREATE TABLE GRPCOMMONS_TBL
    (
        GRP_ID  CHAR(6) NOT NULL PRIMARY KEY,
        GRP_NAME VARCHAR2(30)   NOT NULL
    );
    INSERT INTO GRPCOMMONS_TBL
    VALUES ('GRP001','지역명');
    
    /*공통코드 테이블*/
    CREATE TABLE COMMONS_TBL
    (
        COM_ID  CHAR(7)    NOT NULL,  --공통코드
        GRP_ID  CHAR(6)     NOT NULL, -- 그룹코드
        COM_VAL VARCHAR2(100)   NOT NULL,  --공통코드 명
        COM_LVL NUMBER(8)       NOT NULL,  --공통코드 레벨
        PARENT_ID   CHAR(7)     NOT NULL   --부모코드
    );
    
    DELETE FROM GRPCOMMONS_TBL;
          
    INSERT INTO GRPCOMMONS_TBL VALUES('GRP001','지역코드');
    
    INSERT INTO COMMONS_TBL VALUES('COM0000','GRP001','ROOT',0 ,'ROOT');
    
    --
    --지역코드를 위한 레벨 1 데이터를 생성합니다.
    INSERT INTO COMMONS_TBL VALUES('COM0001','GRP001','서울',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0002','GRP001','부산',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0003','GRP001','대구',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0004','GRP001','대전',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0005','GRP001','울산',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0006','GRP001','세종',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0007','GRP001','광주',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0008','GRP001','인천',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0009','GRP001','강원',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0011','GRP001','경기',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0012','GRP001','충북',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0013','GRP001','충남',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0014','GRP001','경북',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0015','GRP001','경남',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0016','GRP001','전북',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0017','GRP001','전남',1 ,'COM0000');
    INSERT INTO COMMONS_TBL VALUES('COM0018','GRP001','제주',1 ,'COM0000');
    
    COMMIT;
    
    --지역코드를 위한 레벨 2 데이터를 생성합니다.
    --부산(COM0002)
    INSERT INTO COMMONS_TBL VALUES('COM0019','GRP001','동래구',2 ,'COM0002');
    INSERT INTO COMMONS_TBL VALUES('COM0020','GRP001','금정구',2 ,'COM0002');
    INSERT INTO COMMONS_TBL VALUES('COM0021','GRP001','해운대구',2 ,'COM0002');
    
    --울산(COM0005) 
    INSERT INTO COMMONS_TBL VALUES('COM0045','GRP001','동구',2 ,'COM0005');
    
    --경남(COM0015)
    INSERT INTO COMMONS_TBL VALUES('COM0022','GRP001','창원',2 ,'COM0015');
    INSERT INTO COMMONS_TBL VALUES('COM0023','GRP001','양산',2 ,'COM0015');
    INSERT INTO COMMONS_TBL VALUES('COM0025','GRP001','김해',2 ,'COM0015');
    INSERT INTO COMMONS_TBL VALUES('COM0026','GRP001','창녕',2 ,'COM0015');
    
    --경북(COM0014)
    INSERT INTO COMMONS_TBL VALUES('COM0027','GRP001','안동',2 ,'COM0014');
    INSERT INTO COMMONS_TBL VALUES('COM0028','GRP001','포항',2 ,'COM0014');
    
    --지역코드를 위한 레벨 3 데이터를 생성합니다.
    --부산(COM0002) -- 동래구(COM0019)
    INSERT INTO COMMONS_TBL VALUES('COM0029','GRP001','명륜동',3 ,'COM0019');
    INSERT INTO COMMONS_TBL VALUES('COM0030','GRP001','망미동',3 ,'COM0019');
    INSERT INTO COMMONS_TBL VALUES('COM0031','GRP001','연산1동',3 ,'COM0019');
    INSERT INTO COMMONS_TBL VALUES('COM0032','GRP001','연산3동',3 ,'COM0019');
    INSERT INTO COMMONS_TBL VALUES('COM0033','GRP001','칠산동',3 ,'COM0019');
    
    --부산(COM0002) -- 금정구(COM0020)
    INSERT INTO COMMONS_TBL VALUES('COM0034','GRP001','장전동',3 ,'COM0020');
    INSERT INTO COMMONS_TBL VALUES('COM0035','GRP001','구서동',3 ,'COM0020');
    INSERT INTO COMMONS_TBL VALUES('COM0036','GRP001','남산동',3 ,'COM0020');
    INSERT INTO COMMONS_TBL VALUES('COM0037','GRP001','청룡동',3 ,'COM0020');
    
    --부산(COM0002) -- 해운대구(COM0021)
    INSERT INTO COMMONS_TBL VALUES('COM0038','GRP001','우동',3 ,'COM0021');
    INSERT INTO COMMONS_TBL VALUES('COM0039','GRP001','좌동',3 ,'COM0021');
    
    --울산(COM0005) -- 동구COM0045()
    INSERT INTO COMMONS_TBL VALUES('COM0046','GRP001','전하동',3 ,'COM0045');
    
    
    --경남(COM0015) -- 창원(COM0022)
    INSERT INTO COMMONS_TBL VALUES('COM0040','GRP001','창원구',3 ,'COM0022');
    INSERT INTO COMMONS_TBL VALUES('COM0041','GRP001','마산구',3 ,'COM0022');
    INSERT INTO COMMONS_TBL VALUES('COM0042','GRP001','진해구',3 ,'COM0022');    
    
    --지역코드를 위한 레벨 4 데이터를 생성합니다.
    --경남(COM0015) -- 창원(COM0022) -- 창원구(COM0040)
    INSERT INTO COMMONS_TBL VALUES('COM0043','GRP001','상남동',4 ,'COM0040');
    INSERT INTO COMMONS_TBL VALUES('COM0044','GRP001','중앙동',4 ,'COM0040');
    INSERT INTO COMMONS_TBL VALUES('COM0045','GRP001','사파정동',4 ,'COM0040');
    
    --경남(COM0015) -- 창원(COM0022) -- 마산구(COM0041)
    INSERT INTO COMMONS_TBL VALUES('COM0047','GRP001','덕동',4 ,'COM0041');
    INSERT INTO COMMONS_TBL VALUES('COM0048','GRP001','합포동',4 ,'COM0041');
    
    DELETE FROM COMMONS_TBL WHERE GRP_ID = 'GRP002';
    COMMIT;

    




