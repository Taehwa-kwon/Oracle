0618
1교시 ------------------------------------------------------





                            - ACCESS_INTO_NULL 

                                : 정의되지 않은 오브젝트 속성에 값을 할당하고자 했을 때 발생하는 예외.                      

                            - CASE_NOT_FOUND 

                                : CASE문의 when절에 해당되는 조건이 없고 else절도 없을 경우 발생

                            - COLLECTION_IS_NULL 

                                : 선언되지 않은 컬렉션(nested table, varray)에 존재하는 메서드

                                                   이외의 메서드를 사용했을 때 발생되는 예외.

                            - CURSOR_ALREADY_OPEN 

                                : 이미 열려진 커서를 열려고 시도 했을 때 발생하는 예외

                            - DUP_VAL_ON_INDEX 

                                : 유일인덱스에 중복값을 입력햇을 때 발생하는 예외.

                            - INVALID_CURSOR 

                                : 잘못된 커서 조작이 샐행될 때 발생되는 예외.

                            - INVALID_NUMBER 

                                : 문자를 숫자로의 변환 시 실패가 될 때 발생하는 예외.

                            - LOGIN_DENIED 

                                : 잘못된 사용자명이나 암호로 로그인시도시 발생하는 예외.

                            - NO_DATA_FOUND 

                                : PL/SQL Select문이 한 건도 리턴하지 못하는 경우 발생하는 예외.

                            - NOT_LOGGED ON 

                                : 접속되지 않은 상태에서 데이터베이스에 대한 요청이 PL/SQL 프로그램으로

                                  실행된 경우 발생되는 예외.

                            - PROGRAM_ERROR 

                                : PL/SQL이 내부적인 문제를 가지고 있는 경우 발생되는 예외.

                            - ROWTYPE_MISMATCH 

                                : 할당문에서 호스트 커서 변수와 PL/SQL 커서 변수의 데이터 형이 불일치할 때 발생되는 예외

                            - STORAGE_ERROR 

                                : PL/SQL이 실행될 때 메모리가 부족하거나 메모리상에 문제가 일어났을 대 발생하는 예외.

                            - SUBSCRIPT_BEYOND_COUNT 

                                : 컬렉션의 요소 갯수보다 더 큰 첨자 값으로 참조한 경우 발생

                            - SUBSCRIPT_OUTSIDE_LIMIT 

                                : 컬렉션의 첨자 한계를 벗어난 참조가 일어났을 때 발생

                            - SYS_INVALID_ROWD 

                                : 문자열을 ROWID로 변환할 때 무효한 문자열의 표현일 경우 발생되는 예외.

                            - TIMEOUT_ON_RESOURCE 

                                : 자원에 대한 대기시간이 초과했을 때 발생하는 예외.

                            - TOO_MANY_ROWS 

                                : PL/SQL select문이 두건이상의 행을 리턴햇을 때 발생되는 예외.

                            - VALUE_ERROR 

                                : 산술,변환,절삭 크기 제약에 에러가 생겼을 때 발생되는 예외.

                            - ZERO_DIVIDE

                                : 0으로 나누려 했을 때 발생하는 예외


?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
 
-- 미리 정의된 예외(Predefined ORACLE Exception) EX)
declare
  emp_lastname employees.last_name%type;
begin
  select last_name into emp_lastname
  from employees
  where last_name like 'B%';
   
  DBMS_OUTPUT.put_line('사원명 : ' || emp_lastname);
 
exception
  when no_data_found then
    DBMS_OUTPUT.PUT_LINE('해당 사원이 없습니다.');
  when too_many_rows then
    DBMS_OUTPUT.PUT_LINE('사원이 두명 이상입니다.');
end;
/
 
-- 사용자 정의 예외처리 EX)
-- 1. pragma를 이용한 컴파일러에 지정하는 방법
declare
  emp_exist exception;
  pragma exception_init(emp_exist, -2292); -- emp_exist예외는 2292번 에러 코드로 처리하겠다고 컴파일러에 알려주는 부분
begin
  delete departments 
  where department_id = &deptno; -- 사용자에게 detpno값 입력 받아 해당 내용을 지움
   
  commit; -- 반영함
 
  exception
    when emp_exist then
      DBMS_OUTPUT.PUT_LINE('사원이 존재하기 때문에 지울 수 없습니다.');
end;
/ -- 20번 입력
 
-- 2. raise를 이용한 예외처리 발생 방법
declare
  emp_id employees.employee_id%type;
  emp_name employees.last_name%type;
   
  no_emp exception; -- 예외명 선언
begin
  delete employees
  where employee_id = &empid;
   
  if sql%notfound then -- "묵시적커서" 속성을 이용
    raise no_emp; -- 예외를 발생시킴
  end if;
 
  exception
    when no_emp then -- raise로 no_emp가 발생할 경우 처리할 부분
      DBMS_OUTPUT.PUT_LINE('해당사원이 없습니다.');
end;
/
 
-- raise_application_error라는 프로시저를 이용하는 방법
    --  이때, 이용가능한 번호 : 20000 ~ 20999 번
declare
  emp_id employees.employee_id%type;
  emp_name employees.last_name%type;
begin
  delete employees
  where employee_id = &empid;
   
  if (sql%notfound) then
    raise_application_error(-20111,'사원이 없습니다..'); -- 에러코드와 에러메시지 지정
  end if;
end;
/
 
 
set serveroutput on;
 









----웹 서버를 만들기위해서는 먼저 어떤 언어를 사용할지 결정해야 한다.

트랜잭션 : 업무의 최소단위 ~ all or noting  중간에 오류가 발생하면 터져버린다. 


하나는 중복 아이디가 있는지 없는지를 검사하기위한 일련의 과정들 ( 1번째 영역 ) 
나머지는,  유저에게 단순히 텍스트나 다이얼로그로 알려주는 것이 있습니다. ( 2번째 영역 )


2tier(클라이언트 티어-데이터 티어) 은  Presentation(view)와 2번쨰 영역이 있는것 

첫번쨰 영역 = 비즈니스 
회원이 작성한 아이디 값 저장하기 -> 회원정보가 있는 데이터베이스 연결 ->
데이터베이스에 회원이 작성한 아이디 값이 있는지 Select -> 
회원의 아이디가 이미 있는지 없는지 여부를 데이터화 하여 저장 -> 
데이터베이스 연결 끊기 -> View영역에게 가공된 데이터 전달



클라이언트 - was - db 인데

3tier(클라이언트 티어-애플리케이션 티어-데이터 티어) 은 클라이언트(네이버) -> WAS비즈니스로직 -> yes24 DB (네이버가 책을 검색해서 yes24에서 실시간 재고 현황을 받을떄)







3교시 프로시저---------------------------------------------------------------------------
파라미터 종류는 3가지 IN,OUT,INOUT





--마지막

웹에서 클라이언트가 타입에 IN_SNAME, IN_DID, IN_DAGE, IN_GEN 이것들을 회원등록하면
이것을 받아서와서 DB의 패키지에서 한번에 처리한다.
그중에 프로시저의 PROC_INSERT 가 실행이 되며 

패키지의 변수명과 Body의 변수명은 꼭 같아야한다. 







